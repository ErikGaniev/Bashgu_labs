import numpy as np
import matplotlib.pyplot as plt

maxu = 0
pi = np.pi


def progon(N, a, b, c, f):
    m = np.zeros(N + 1)
    p = np.array([b[0] / a[0]])
    q = np.array([f[0] / a[0]])

    for i in range(1, N + 1):  # (int i = 1; i <= N; i++)
        p = np.append(p, b[i] / (a[i] - c[i] * p[i - 1]))
        q = np.append(q, (f[i] + c[i] * q[i - 1]) / (a[i] - c[i] * p[i - 1]))

    m[N] = q[N]
    for i in range(N - 1, -1, -1):  # (int i = N - 1; i >= 0; i--)
        m[i] = p[i] * m[i + 1] + q[i]

    return m


def analitic(q, t):
    return 0.5 * np.exp(-q) * np.sin(q) * np.sin(2 * t)


print(pi)
ax = 0
bx = pi
N = 100
eps = 0.001

h = (bx - ax) / N  # шаг по х
tay = 0.01  # шах по времени

x = np.arange(ax, bx + h, h)
y = np.zeros(N + 1)
y1 = np.zeros(N + 1)
y2 = np.zeros(N + 1)
y1 = y2 + tay * np.exp(-x) * np.sin(x)

dy = np.zeros(N + 1)
# print(y1)
# заполнение массива х


k = 3
time = np.arange(0, k * tay, tay)

# цикл по времени
for w in range(k):
    # задаем коэфиценты

    a = np.array([1])
    b = np.array([0])
    c = np.array([0])
    f = np.array([0])

    for i in range(1, N):  # (int i = 1; i < N; i++)
        a = np.append(a, 1 / (tay ** 2) + 4 / (h ** 2))
        b = np.append(b, 2 / (h ** 2) + 2 / h)
        c = np.append(c, 2 / (h ** 2) - 2 / h)
        f = np.append(f, 2 * y1[i] / (tay ** 2) - y2[i] / (tay ** 2))

        # cout << uold[i]<<endl;

    a = np.append(a, 1)
    b = np.append(b, 0)
    c = np.append(c, 0)
    f = np.append(f, 0)

    y = progon(N, a, b, c, f)

    # Разница du

    maxu = 0

    y2 = y1
    y1 = y

# сравнение с точным


y_exact = np.zeros(N + 1)
diff_y = np.zeros(N + 1)

print("x  y  y_exact diff")
for i in range(N + 1):
    y_exact[i] = 0.5 * np.exp(-x[i]) * np.sin(x[i]) * np.sin(2 * k * tay)
    # analitic(x[i], k * tay)
    diff_y[i] = abs(y[i] - y_exact[i])
    print(x[i], " ", y[i], " ", y_exact[i], " ", diff_y[i])

u = np.zeros(N + 1)
u1 = np.zeros(N + 1)
u2 = np.zeros(N + 1)
u1 = u2 + tay * np.exp(-x) * np.sin(x)

for j in range(k):
    for i in range(1, N):
        u[i] = 2 * u1[i] - u2[i] + tay ** 2 * (2 * (u1[i - 1] - 2 * u1[i] + u1[i + 1]) / (h ** 2) + 2 * (
                u1[i + 1] - u1[i - 1]) / h)
    u2 = u1
    u1 = u

print(u)

plt.figure()
plt.plot(x, y, "o-", label="y")
plt.plot(x, u, "o-", label="u")
plt.plot(x, y_exact, "o-", label="y_exact")
plt.title("график")
plt.xlabel("x")
plt.xlabel("y")
plt.legend()
plt.grid()
plt.show()
