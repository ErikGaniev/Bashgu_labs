import numpy as np
import matplotlib.pyplot as plt

maxu = 0
pi = np.pi


def progon(N, a, b, c, f):
    m = np.zeros(N + 1)
    p = np.array([b[0] / a[0]])
    q = np.array([f[0] / a[0]])

    for i in range(1, N + 1):  # (int i = 1; i <= N; i++)
        p = np.append(p, b[i] / (a[i] - c[i] * p[i - 1]))
        q = np.append(q, (f[i] + c[i] * q[i - 1]) / (a[i] - c[i] * p[i - 1]))

    m[N] = q[N]
    for i in range(N - 1, -1, -1):  # (int i = N - 1; i >= 0; i--)
        m[i] = p[i] * m[i + 1] + q[i]

    return m


def analitic(x, t):
    return (1 - np.exp(-pi * pi * t)) * np.sin(pi * x) / (pi * pi)


print(pi)
koef_a = 1
ax = 0
bx = 1
N = 100
eps = 0.001

h = (bx - ax) / N  # шаг по х
tay = 0.01  # шах по времени

x = np.array([])
u = np.array([])
uoid = np.zeros(N + 1)
du = np.zeros(N + 1)
umaxtit = np.zeros(1000)
umaxtit_2 = np.zeros(1000)
# заполнение массива х

for i in range(N + 1):  # (int i = 0; i <= N; i++)
    x = np.append(x, ax + i * h)
    # print(x)
    # uold[i] = 0
    # print(x[i],uoid[i])

k = 0
maxu = 1

# цикл по времени
while maxu > eps:
    # задаем коэфиценты

    a = np.array([1])
    b = np.array([0])
    c = np.array([0])
    f = np.array([0])

    for i in range(1, N):  # (int i = 1; i < N; i++)
        a = np.append(a, 1 + 2 * koef_a * tay / (h * h))
        b = np.append(b, koef_a * tay / (h * h))
        c = np.append(c, koef_a * tay / (h * h))
        f = np.append(f, uoid[i] + tay * np.sin(pi * x[i]))

        # cout << uold[i]<<endl;

    a = np.append(a, 1)
    b = np.append(b, 0)
    c = np.append(c, 0)
    f = np.append(f, 0)

    u = progon(N, a, b, c, f)

    # Разница du

    maxu = 0

    for i in range(N + 1):  # (int i = 0; i <= N; i++)
        du[i] = abs(u[i] - uoid[i])
        maxu = max(maxu, du[i])

    umaxtit[k] = maxu

    for i in range(N + 1):  # (int i = 0; i <= N; i++)
        uoid[i] = u[i]
    k += 1

# сравнение с точным
int_inc = k

time = np.zeros(1000)
for i in range(k + 1):  # (int i = 0; i <= k; i++)
    time[i] = i * tay

print(time[k])
u_exact = np.zeros(N + 1)
diff_u = np.zeros(N + 1)

print("x  u  u_exact diff")
for i in range(N + 1):
    u_exact[i] = analitic(x[i], time[k])
    diff_u[i] = abs(u[i] - u_exact[i])
    print(x[i], " ", u[i], " ", u_exact[i], " ", diff_u[i])

plt.figure()
plt.plot(x, u, "o-", label="y")
plt.plot(x, u_exact, "o-", label="y_exact")
plt.title("график")
plt.xlabel("x")
plt.xlabel("y")
plt.legend()
plt.grid()
plt.show()

y = np.zeros(N + 1)
yold = np.zeros(N + 1)
dy = np.zeros(N + 1)
maxu = 1
print(int_inc)
# print(yold)
eps1 = 6 * 10 ** -3
koef_a = 1
tay = 10 ** -5
# цикл по времени
for j in range(25* 10 ** 3):
    for i in range(1, N):
        y[i] = koef_a * tay * (yold[i + 1] + yold[i - 1]) / (h ** 2) + yold[i] * (
                1 - 2 * koef_a * tay / (h ** 2)) + np.sin(pi * x[i]) * tay
    for i in range(N + 1):  # (int i = 0; i <= N; i++)
        yold[i] = y[i]

diff_y = np.zeros(N + 1)
for i in range(N + 1):
    diff_y[i] = abs(y[i] - u_exact[i])
    print(x[i], " ", y[i], " ", u_exact[i], " ", diff_y[i])

plt.figure()
plt.plot(x, u, "o-", label="y")
plt.plot(x, u_exact, "o-", label="y_exact")
plt.plot(x, y, "o-", label="y2")
plt.title("график")
plt.xlabel("x")
plt.xlabel("y")
plt.legend()
plt.grid()
plt.show()

# print(analitic(1, 1))

uoid_KN = np.zeros(N + 1)
du_KN = np.zeros(N + 1)
k = 0
maxu = 1
koef_a = 1
tay = 0.01
# цикл по времени
while maxu > eps:
    # задаем коэфиценты

    a_KN = np.array([1])
    b_KN = np.array([0])
    c_KN = np.array([0])
    f_KN = np.array([0])

    for i in range(1, N):  # (int i = 1; i < N; i++)
        a_KN = np.append(a_KN, 1 / tay + koef_a / (h * h))
        b_KN = np.append(b_KN, koef_a / (2 * h * h))
        c_KN = np.append(c_KN, koef_a / (2 * h * h))
        f_KN = np.append(f_KN,
                         uoid_KN[i] * (1 / tay - koef_a / (h ** 2)) + koef_a * (uoid_KN[i + 1] + uoid_KN[i - 1]) / (
                                 2 * h ** 2) + np.sin(pi * x[i]))

        # cout << uold[i]<<endl;

    a_KN = np.append(a_KN, 1)
    b_KN = np.append(b_KN, 0)
    c_KN = np.append(c_KN, 0)
    f_KN = np.append(f_KN, 0)

    u_KN = progon(N, a_KN, b_KN, c_KN, f_KN)

    # Разница du

    maxu = 0

    for i in range(N + 1):  # (int i = 0; i <= N; i++)
        du_KN[i] = abs(u_KN[i] - uoid_KN[i])
        maxu = max(maxu, du_KN[i])

    umaxtit[k] = maxu

    for i in range(N + 1):  # (int i = 0; i <= N; i++)
        uoid_KN[i] = u_KN[i]
    k += 1

diff_yKN = np.zeros(N + 1)
for i in range(N + 1):
    diff_yKN[i] = abs(u_KN[i] - u_exact[i])
    print(x[i], " ", u_KN[i], " ", u_exact[i], " ", diff_yKN[i])

plt.figure()
plt.plot(x, u, "o-", label="y")
plt.plot(x, u_exact, "o-", label="y_exact")
plt.plot(x, y, "o-", label="y2")
plt.plot(x, u_KN, "o-", label="y_KN")
plt.title("график")
plt.xlabel("x")
plt.xlabel("y")
plt.legend()
plt.grid()
plt.show()

